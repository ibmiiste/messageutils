**FREE
// DS returned by QMHRCVPM for format RCVM0300
Dcl-DS RCVM0300  QUALIFIED Template;
  ByteReturned   Int(10);
  ByteAvail      Int(10);
  MsgSeverity    Int(10);
  MsgId          Char(7);
  MsgType        Char(2);
  MsgKey         Char(4);
  MsgFileName    Char(10);
  MsgLibSpec     Char(10);
  MsgLibUsed     Char(10);
  AlertOption    Char(9);
  CCSIDCnvIndText Int(10);
  CCSIDCnvIndData Int(10);
  CCSIDMsg       Int(10);
  CCSIDReplace   Int(10);
  LenReplace1    Int(10);
  LenReplace2    Int(10);
  LenMsgReturn   Int(10);
  LenMsgAvail    Int(10);
  LenHelpReturn  Int(10);
  LenHelpAvail   Int(10);
  LenSenderReturn Int(10);
  LenSenderAvail Int(10);
  MsgData        Char(5000);
End-DS;         

// --------------------------------------------------
// Message
// id : Identificateur du message.
// file: Nom du fichier qualifié qui contient le message.
// fileName: Nom du fichier qui contient le message.
// libName: Le nom de la bibliothèque qui contient le fichier de message.
// text: Le texte du message.
// data: Les données du message.
// key: La clé du message. 
// --------------------------------------------------    
DCL-DS Message qualified template;
  id char(7);
  file char(20);
  fileName char(10) overLay(file);
  libName  char(10) overLay(file:*Next);
  text char(132);
  data char(3000);
  key char(4);
END-DS;  

// Méthodes
// --------------------------------------------------
// Nom de la procédure: SndPgmMsg
// Documentation https://www.ibm.com/docs/en/i/7.3?topic=ssw_ibm_i_73/apis/QMHSNDPM.html
// Objectif: Envoyé un message à la file de message du programme
// Retourne:
// Paramètre: id => Identificateur du message
// Paramètre: file => Nom du fichier qualifié qui contient le message
// Paramètre: data => Les données du message
// Paramètre: length => Longueur des données du message
// Paramètre: type => Type du message
// Paramètre: callStack => La pile d'appel
// Paramètre: callStackCtr => Le nombre de ligne de la pile d'appel
// Paramètre: key => La clé du message
// Paramètre: errorForAPI => La structure d'erreur pour l'API
// --------------------------------------------------                  
DCL-PR SndPgmMsg ExtPgm('QMHSNDPM');
  id            char(7) const;
  file          char(20) const;
  data          char(3000) const;
  length        int(10) const;
  type          char(10) const;
  callStack     char(19) const;
  callStackCtr  int(10) const;
  key           char(4);
  errorForAPI   like(ApiError);
END-PR; 

//*************************************************************************
//                                                                       **
//  Send  : Emission d'un message programme avec choix du type de        **
//          message                                                      **
//                                                                       **
//  Returns:   La clé du message généré                                  **
//*************************************************************************
DCL-PR msg_send char(4);
  MsgId     char(7) const;
  MsgDataIn varchar(32767) const options(*Omit:*NoPass);
  MsgType   char(10) const options(*NoPass);
  MsgFileIn char(10) const options(*NoPass);
  MsgLibIn char(10) const options(*NoPass);
  CallStackCounterIn bindec(4) const options(*nopass);
END-PR;   